#!/usr/bin/env python
"""
Attach and detach user configured disk images based on settings, to
predefined folders with custom parameters.
"""

import os
from systematic.shell import Script, ScriptCommand
from darwinist.diskimage import DiskImagesConfig, DiskImage, DiskImageError
from darwinist.diskutil  import INFO_FIELD_MAP,  INFO_FIELD_ORDER

script = Script(subcommands=True)
script.register_subcommand('list', 'list', 'List images')
script.register_subcommand('names', 'names', 'List image names')
script.register_subcommand('info', 'info', 'Show image info')
attach = script.register_subcommand('attach', 'attach', 'Attach images')
attach.add_argument('images', nargs='*', help='Image names to process')
detach = script.register_subcommand('detach', 'detach', 'Detach images')
detach.add_argument('images', nargs='*', help='Image names to process')
args = script.parse_args()

dmgs = DiskImagesConfig()
if 'images' in args:
    images = []
    for value in args.images:
        dmg = dmgs.match(value)
        if dmg:
            images.append(dmg)
    args.images = images
else:
    args.images = []

for name, dmg in dmgs.items():
    if args.images and dmg not in args.images:
        continue

    if args.command == 'names':
        print name

    if args.command == 'list':
        script.message('%s: %s on %s: %s' % (
            name, dmg.image, dmg.mountpoint,
            dmg.connected and 'attached' or 'not attached'
        ))

    if args.command == 'detach':
        script.log.debug('Detaching: %s' % dmg.mountpoint)
        try:
            dmg.detach()
        except DiskImageError, emsg:
            print emsg

    if args.command == 'attach':
        if not os.path.isfile(dmg.image):
            script.message('No such file: %s' % dmg.image)
            continue

        script.message('Attaching: %s' % dmg.image)
        try:
            dmg.attach()
        except DiskImageError, emsg:
            script.error(emsg)

    if args.command == 'info':
        info = dmg.info
        script.message(name)
        if dmg.description:
            script.message('%14s %s' % ('Description', dmg.description))

        if info is None:
            script.message('Image not mounted')

        for k in INFO_FIELD_ORDER:
            if k not in info.keys():
                continue
            script.message('%14s %s' % (
                INFO_FIELD_MAP[k]['name'],
                INFO_FIELD_MAP[k]['value'](info[k]),
            ))


