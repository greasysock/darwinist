#!/usr/bin/env python
"""
Connect, disconnect or show status of a VPN connection in OS/X.

Can be used for OS/X integrated VPN connections only. VPN will still
ask password in a graphical window, if not permanently configured, so you
can't run this headless remotely.

If you can figure out how to enter the VPN passphrase, please send the info
to hile@iki.fi and I'll update the module and this script to allow entering
the passwords as well.
"""

import os,time

from systematic.shell import Script
from darwinist.networkprofile import NetworkProfileList

CONFIG_PATH = os.path.join(os.getenv('HOME'),'.networks.conf')

script = Script()
script.add_argument('-n','--name',help='Connection name')
script.add_argument('-w','--wait',action='store_true',help='Wait for connect/disconnect')
script.add_argument('-l','--list',action='store_true',help='List connections')
script.add_argument('mode',nargs='*',help='Operation to execute')
args = script.parse_args()

if script.name == 'btcontrol':
    linktype = 'dialup'
elif script.name == 'vpncontrol':
    linktype = 'vpn'
else:
    linktype = None
    script.exit(1,'Unknown called name: %s' % script.name)

mode = len(args.mode)>0 and args.mode[0] or None

if not args.list and mode is None:
    script.usage_error('No mode selected')

npl = NetworkProfileList(config=CONFIG_PATH)
links = npl.filter(linktype)
if args.list:
    if not len(links):
        script.exit(1,'No %s connections defined' % linktype)
    for l in links:
        print l.name
    script.exit()

n = None
try:
    if args.name is not None:
        try:
            n = npl[args.name]
            if n not in links:
                raise ValueError('Not a %s link: %s' % (linktype,args.name))
        except KeyError:
            raise ValueError('No such %s link: %s' % (linktype,args.name))
    else:
        if npl.config.has_key(linktype):
            default = npl.config[linktype]['default']
            try:
                n = npl[default]
            except KeyError:
                print 'WARNING: Default %s link %s not found' % (linktype,default)
                n = links[0]
        else:
            n = links[0]

except ValueError,emsg:
    script.exit(1,emsg)

if mode in ['start','connect']:
    if n.connected:
        script.exit(message='Already connected.')
    n.connect()
    if args.wait:
        script.log.info('Waiting for %s to connect...' % n.name)
        while True:
            if n.connected:
                break
            time.sleep(1)

elif mode in ['stop','disconnect']:
    if not n.connected:
        script.exit(message='Not connected.')
    n.disconnect()
    if args.wait:
        script.log.info('Waiting for %s to disconnect...' % n.name)
        while True:
            if not n.connected:
                break
            time.sleep(1)
    while True:
        if not n.connected:
            break
        time.sleep(1)

elif mode in ['status']:
    status = n.connected
    print '%s %s %s' % (
        n.name,linktype,status and 'is connected' or 'is not connected'
    )
    script.exit(status==False and 1 or 0)

elif mode in ['wait']:
    while True:
        if n.connected:
            break
        time.sleep(1)

else:
    script.exit(1,script.get_usage())

script.exit()

